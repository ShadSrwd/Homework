----------------
----------------
DESIGN:
----------------
----------------


module mini_8086_cpu(
    inout [3:0] data_bus,
    input [3:0] addr_bus,
    input clk,
    input reset,
    input rd,
    input wr,
    output [2:0] flags
);

    reg [3:0] reg_file [3:0]; // R0–R3
    reg [3:0] alu_result;
    reg [2:0] flags_reg;      // {CF, ZF, SF}
    reg [3:0] data_out;
    reg write_phase = 0;
    reg [1:0] opcode, dest_sel, src_sel;

    assign data_bus = (!rd) ? data_out : 4'bz;
    assign flags = flags_reg;

    integer i;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            for (i = 0; i < 4; i = i + 1)
                reg_file[i] <= 0;
            flags_reg <= 0;
            write_phase <= 0;
        end else if (!wr) begin
            if (!write_phase) begin
                opcode   <= addr_bus[3:2];
                dest_sel <= addr_bus[1:0];
                write_phase <= 1;
            end else begin
                src_sel = addr_bus[1:0];
                case (opcode)
                    2'b00: begin // ADD
                        {flags_reg[2], alu_result} = reg_file[dest_sel] + reg_file[src_sel];
                    end
                    2'b01: begin // SUB
                        alu_result = reg_file[dest_sel] - reg_file[src_sel];
                        flags_reg[2] = (reg_file[dest_sel] < reg_file[src_sel]); // CF
                    end
                    2'b10: begin // AND
                        alu_result = reg_file[dest_sel] & reg_file[src_sel];
                        flags_reg[2] = 0; // CF = 0
                    end
                    default: alu_result = 0;
                endcase

                flags_reg[1] = (alu_result == 0); // ZF
                flags_reg[0] = alu_result[3];     // SF

                reg_file[dest_sel] <= alu_result;
                write_phase <= 0;
            end
        end
    end

    always @(*) begin
        if (!rd)
            data_out = reg_file[addr_bus[1:0]];
        else
            data_out = 4'bz;
    end

endmodule



---------------------
---------------------
TESTBENCH:
---------------------
---------------------



`timescale 1ns/1ps

module tb_mini_8086_cpu;

    reg clk = 0, reset = 0, rd = 1, wr = 1;
    reg [3:0] addr_bus = 0;
    wire [3:0] data_bus;
    wire [2:0] flags;

    // DUT
    mini_8086_cpu uut (
        .data_bus(data_bus),
        .addr_bus(addr_bus),
        .clk(clk),
        .reset(reset),
        .rd(rd),
        .wr(wr),
        .flags(flags)
    );

    always #5 clk = ~clk;

    task write_instr(input [3:0] ph1, input [3:0] ph2);
        begin
            wr = 0; addr_bus = ph1; #10;
            addr_bus = ph2; #10;
            wr = 1; #10;
        end
    endtask

    task read_reg(input [1:0] regid);
        begin
            rd = 0; addr_bus = {2'b00, regid}; #10;
            rd = 1; #10;
        end
    endtask

    initial begin
        $dumpfile("wave.vcd");
        $dumpvars(0, tb_mini_8086_cpu);

        reset = 1; #10; reset = 0;

        uut.reg_file[0] = 4;  // R0
        uut.reg_file[1] = 3;  // R1
        uut.reg_file[2] = 7;  // R2
        uut.reg_file[3] = 2;  // R3

        // ADD R0 ← R0 + R1
        write_instr(4'b0100, 4'b0001); // ADD to R0 using R1
        read_reg(2'b00);

        // SUB R2 ← R2 - R3
        write_instr(4'b0110, 4'b0011); // SUB to R2 using R3
        read_reg(2'b10);

        // AND R1 ← R1 & R3
        write_instr(4'b1010, 4'b0011); // AND to R1 using R3
        read_reg(2'b01);

        $finish;
    end

endmodule


